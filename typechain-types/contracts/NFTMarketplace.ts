/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace NFTMarketplace {
  export type MarketItemStruct = {
    tokenId: PromiseOrValue<BigNumberish>;
    seller: PromiseOrValue<string>;
    owner: PromiseOrValue<string>;
    lastBider: PromiseOrValue<string>;
    royalty: PromiseOrValue<string>;
    price: PromiseOrValue<BigNumberish>;
    tokenURI: PromiseOrValue<string>;
    creator: PromiseOrValue<string>;
    isAuction: PromiseOrValue<boolean>;
    timestamp: PromiseOrValue<BigNumberish>;
    lasttrade: PromiseOrValue<BigNumberish>;
    isMarket: PromiseOrValue<boolean>;
    nonce: PromiseOrValue<BigNumberish>;
    rarity: PromiseOrValue<BigNumberish>;
  };

  export type MarketItemStructOutput = [
    BigNumber,
    string,
    string,
    string,
    string,
    BigNumber,
    string,
    string,
    boolean,
    BigNumber,
    BigNumber,
    boolean,
    BigNumber,
    BigNumber
  ] & {
    tokenId: BigNumber;
    seller: string;
    owner: string;
    lastBider: string;
    royalty: string;
    price: BigNumber;
    tokenURI: string;
    creator: string;
    isAuction: boolean;
    timestamp: BigNumber;
    lasttrade: BigNumber;
    isMarket: boolean;
    nonce: BigNumber;
    rarity: BigNumber;
  };

  export type UserCardStruct = {
    userId: PromiseOrValue<BigNumberish>;
    userName: PromiseOrValue<string>;
  };

  export type UserCardStructOutput = [BigNumber, string] & {
    userId: BigNumber;
    userName: string;
  };
}

export interface NFTMarketplaceInterface extends utils.Interface {
  functions: {
    "addUserCard(string)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "cancelToken(uint256[])": FunctionFragment;
    "createAuctionSale(uint256[])": FunctionFragment;
    "createMarketSale(uint256[])": FunctionFragment;
    "createToken(string,string,uint256,uint256,uint256,uint256,address,uint256)": FunctionFragment;
    "endAuction(uint256[])": FunctionFragment;
    "endAuctionBatch()": FunctionFragment;
    "fetchAuctionItems()": FunctionFragment;
    "fetchByTokenIds(uint256[])": FunctionFragment;
    "fetchItemsByFeatureInfluencers()": FunctionFragment;
    "fetchMarketItems()": FunctionFragment;
    "fetchMyAuctionNFTs(address)": FunctionFragment;
    "fetchMyMarketNFTs(address)": FunctionFragment;
    "fetchOwnableItems(address)": FunctionFragment;
    "fetchRarityByTokenIds(uint256[])": FunctionFragment;
    "fetchUserNFTs(address)": FunctionFragment;
    "getAllUserCards()": FunctionFragment;
    "getApproved(uint256)": FunctionFragment;
    "getListingPrice()": FunctionFragment;
    "getMintedCoiunt()": FunctionFragment;
    "getUserCard()": FunctionFragment;
    "influencer_exist(string)": FunctionFragment;
    "influencer_featured(string)": FunctionFragment;
    "influencer_str(uint256)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mintedAddr()": FunctionFragment;
    "mintedCount()": FunctionFragment;
    "name()": FunctionFragment;
    "ownerOf(uint256)": FunctionFragment;
    "resellToken(uint256[],uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256)": FunctionFragment;
    "safeTransferFrom(address,address,uint256,bytes)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "setFeature(string,bool)": FunctionFragment;
    "setUserCard(bool)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "symbol()": FunctionFragment;
    "tokenURI(uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "uniknums(uint256)": FunctionFragment;
    "updateListingPrice(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addUserCard"
      | "approve"
      | "balanceOf"
      | "cancelToken"
      | "createAuctionSale"
      | "createMarketSale"
      | "createToken"
      | "endAuction"
      | "endAuctionBatch"
      | "fetchAuctionItems"
      | "fetchByTokenIds"
      | "fetchItemsByFeatureInfluencers"
      | "fetchMarketItems"
      | "fetchMyAuctionNFTs"
      | "fetchMyMarketNFTs"
      | "fetchOwnableItems"
      | "fetchRarityByTokenIds"
      | "fetchUserNFTs"
      | "getAllUserCards"
      | "getApproved"
      | "getListingPrice"
      | "getMintedCoiunt"
      | "getUserCard"
      | "influencer_exist"
      | "influencer_featured"
      | "influencer_str"
      | "isApprovedForAll"
      | "mintedAddr"
      | "mintedCount"
      | "name"
      | "ownerOf"
      | "resellToken"
      | "safeTransferFrom(address,address,uint256)"
      | "safeTransferFrom(address,address,uint256,bytes)"
      | "setApprovalForAll"
      | "setFeature"
      | "setUserCard"
      | "supportsInterface"
      | "symbol"
      | "tokenURI"
      | "transferFrom"
      | "uniknums"
      | "updateListingPrice"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addUserCard",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelToken",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createAuctionSale",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createMarketSale",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "createToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuction",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "endAuctionBatch",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchAuctionItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchByTokenIds",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchItemsByFeatureInfluencers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMarketItems",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMyAuctionNFTs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchMyMarketNFTs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchOwnableItems",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchRarityByTokenIds",
    values: [PromiseOrValue<BigNumberish>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "fetchUserNFTs",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllUserCards",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getApproved",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getListingPrice",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMintedCoiunt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserCard",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "influencer_exist",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "influencer_featured",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "influencer_str",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "mintedAddr",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "mintedCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "ownerOf",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "resellToken",
    values: [PromiseOrValue<BigNumberish>[], PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeature",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserCard",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenURI",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "uniknums",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "updateListingPrice",
    values: [PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "addUserCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cancelToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createAuctionSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createMarketSale",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endAuction", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "endAuctionBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchAuctionItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchByTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchItemsByFeatureInfluencers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMarketItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMyAuctionNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchMyMarketNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchOwnableItems",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchRarityByTokenIds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fetchUserNFTs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAllUserCards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getApproved",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getListingPrice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMintedCoiunt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "influencer_exist",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "influencer_featured",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "influencer_str",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mintedAddr", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintedCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "ownerOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "resellToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom(address,address,uint256,bytes)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFeature", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setUserCard",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tokenURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "uniknums", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "updateListingPrice",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "ApprovalForAll(address,address,bool)": EventFragment;
    "AuctionItemBid(uint256,address,address,uint256,uint256,uint256)": EventFragment;
    "AuctionItemEnd(uint256,address,uint256,uint256)": EventFragment;
    "MarketItemCreated(uint256,address,address,uint256,bool,bool)": EventFragment;
    "MarketItemListed(uint256,address,uint256,uint256)": EventFragment;
    "MarketItemSold(uint256,address,address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionItemBid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AuctionItemEnd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketItemCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketItemListed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "MarketItemSold"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export interface ApprovalEventObject {
  owner: string;
  approved: string;
  tokenId: BigNumber;
}
export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  ApprovalEventObject
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export interface ApprovalForAllEventObject {
  owner: string;
  operator: string;
  approved: boolean;
}
export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean],
  ApprovalForAllEventObject
>;

export type ApprovalForAllEventFilter = TypedEventFilter<ApprovalForAllEvent>;

export interface AuctionItemBidEventObject {
  tokenId: BigNumber;
  lastBider: string;
  newBider: string;
  price: BigNumber;
  newprice: BigNumber;
  timestamp: BigNumber;
}
export type AuctionItemBidEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber, BigNumber],
  AuctionItemBidEventObject
>;

export type AuctionItemBidEventFilter = TypedEventFilter<AuctionItemBidEvent>;

export interface AuctionItemEndEventObject {
  tokenId: BigNumber;
  lastBider: string;
  price: BigNumber;
  timestamp: BigNumber;
}
export type AuctionItemEndEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  AuctionItemEndEventObject
>;

export type AuctionItemEndEventFilter = TypedEventFilter<AuctionItemEndEvent>;

export interface MarketItemCreatedEventObject {
  tokenId: BigNumber;
  seller: string;
  owner: string;
  price: BigNumber;
  isAuction: boolean;
  isMarket: boolean;
}
export type MarketItemCreatedEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, boolean, boolean],
  MarketItemCreatedEventObject
>;

export type MarketItemCreatedEventFilter =
  TypedEventFilter<MarketItemCreatedEvent>;

export interface MarketItemListedEventObject {
  tokenId: BigNumber;
  seller: string;
  price: BigNumber;
  timestamp: BigNumber;
}
export type MarketItemListedEvent = TypedEvent<
  [BigNumber, string, BigNumber, BigNumber],
  MarketItemListedEventObject
>;

export type MarketItemListedEventFilter =
  TypedEventFilter<MarketItemListedEvent>;

export interface MarketItemSoldEventObject {
  tokenId: BigNumber;
  seller: string;
  buyer: string;
  price: BigNumber;
  timestamp: BigNumber;
}
export type MarketItemSoldEvent = TypedEvent<
  [BigNumber, string, string, BigNumber, BigNumber],
  MarketItemSoldEventObject
>;

export type MarketItemSoldEventFilter = TypedEventFilter<MarketItemSoldEvent>;

export interface TransferEventObject {
  from: string;
  to: string;
  tokenId: BigNumber;
}
export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  TransferEventObject
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface NFTMarketplace extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NFTMarketplaceInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addUserCard(
      _userName: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    cancelToken(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createAuctionSale(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createMarketSale(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createToken(
      creator: PromiseOrValue<string>,
      tokenURI: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      num: PromiseOrValue<BigNumberish>,
      royalty: PromiseOrValue<string>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endAuction(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    endAuctionBatch(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetchAuctionItems(
      overrides?: CallOverrides
    ): Promise<[NFTMarketplace.MarketItemStructOutput[]]>;

    fetchByTokenIds(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[string[]]>;

    fetchItemsByFeatureInfluencers(
      overrides?: CallOverrides
    ): Promise<[NFTMarketplace.MarketItemStructOutput[]]>;

    fetchMarketItems(
      overrides?: CallOverrides
    ): Promise<[NFTMarketplace.MarketItemStructOutput[]]>;

    fetchMyAuctionNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[NFTMarketplace.MarketItemStructOutput[]]>;

    fetchMyMarketNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[NFTMarketplace.MarketItemStructOutput[]]>;

    fetchOwnableItems(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fetchRarityByTokenIds(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]]>;

    fetchUserNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[NFTMarketplace.MarketItemStructOutput[]]>;

    getAllUserCards(overrides?: CallOverrides): Promise<[string[]]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getListingPrice(overrides?: CallOverrides): Promise<[BigNumber]>;

    getMintedCoiunt(
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { count: BigNumber; addr: string }>;

    getUserCard(
      overrides?: CallOverrides
    ): Promise<[NFTMarketplace.UserCardStructOutput]>;

    influencer_exist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    influencer_featured(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    influencer_str(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mintedAddr(overrides?: CallOverrides): Promise<[string]>;

    mintedCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    resellToken(
      tokenIds: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeature(
      _influencer: PromiseOrValue<string>,
      featured: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setUserCard(
      _enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    uniknums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    updateListingPrice(
      _listingPrice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  addUserCard(
    _userName: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  balanceOf(
    owner: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelToken(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createAuctionSale(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createMarketSale(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createToken(
    creator: PromiseOrValue<string>,
    tokenURI: PromiseOrValue<string>,
    price: PromiseOrValue<BigNumberish>,
    flag: PromiseOrValue<BigNumberish>,
    tier: PromiseOrValue<BigNumberish>,
    num: PromiseOrValue<BigNumberish>,
    royalty: PromiseOrValue<string>,
    _time: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endAuction(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  endAuctionBatch(
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetchAuctionItems(
    overrides?: CallOverrides
  ): Promise<NFTMarketplace.MarketItemStructOutput[]>;

  fetchByTokenIds(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<string[]>;

  fetchItemsByFeatureInfluencers(
    overrides?: CallOverrides
  ): Promise<NFTMarketplace.MarketItemStructOutput[]>;

  fetchMarketItems(
    overrides?: CallOverrides
  ): Promise<NFTMarketplace.MarketItemStructOutput[]>;

  fetchMyAuctionNFTs(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<NFTMarketplace.MarketItemStructOutput[]>;

  fetchMyMarketNFTs(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<NFTMarketplace.MarketItemStructOutput[]>;

  fetchOwnableItems(
    _to: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fetchRarityByTokenIds(
    tokenIds: PromiseOrValue<BigNumberish>[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  fetchUserNFTs(
    user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<NFTMarketplace.MarketItemStructOutput[]>;

  getAllUserCards(overrides?: CallOverrides): Promise<string[]>;

  getApproved(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getListingPrice(overrides?: CallOverrides): Promise<BigNumber>;

  getMintedCoiunt(
    overrides?: CallOverrides
  ): Promise<[BigNumber, string] & { count: BigNumber; addr: string }>;

  getUserCard(
    overrides?: CallOverrides
  ): Promise<NFTMarketplace.UserCardStructOutput>;

  influencer_exist(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  influencer_featured(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  influencer_str(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  isApprovedForAll(
    owner: PromiseOrValue<string>,
    operator: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mintedAddr(overrides?: CallOverrides): Promise<string>;

  mintedCount(overrides?: CallOverrides): Promise<BigNumber>;

  name(overrides?: CallOverrides): Promise<string>;

  ownerOf(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  resellToken(
    tokenIds: PromiseOrValue<BigNumberish>[],
    price: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "safeTransferFrom(address,address,uint256,bytes)"(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    _data: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setApprovalForAll(
    operator: PromiseOrValue<string>,
    approved: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeature(
    _influencer: PromiseOrValue<string>,
    featured: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setUserCard(
    _enable: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tokenURI(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  transferFrom(
    from: PromiseOrValue<string>,
    to: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  uniknums(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  updateListingPrice(
    _listingPrice: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    addUserCard(
      _userName: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelToken(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createAuctionSale(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createMarketSale(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    createToken(
      creator: PromiseOrValue<string>,
      tokenURI: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      num: PromiseOrValue<BigNumberish>,
      royalty: PromiseOrValue<string>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    endAuction(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<void>;

    endAuctionBatch(overrides?: CallOverrides): Promise<void>;

    fetchAuctionItems(
      overrides?: CallOverrides
    ): Promise<NFTMarketplace.MarketItemStructOutput[]>;

    fetchByTokenIds(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<string[]>;

    fetchItemsByFeatureInfluencers(
      overrides?: CallOverrides
    ): Promise<NFTMarketplace.MarketItemStructOutput[]>;

    fetchMarketItems(
      overrides?: CallOverrides
    ): Promise<NFTMarketplace.MarketItemStructOutput[]>;

    fetchMyAuctionNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NFTMarketplace.MarketItemStructOutput[]>;

    fetchMyMarketNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NFTMarketplace.MarketItemStructOutput[]>;

    fetchOwnableItems(
      _to: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchRarityByTokenIds(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    fetchUserNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<NFTMarketplace.MarketItemStructOutput[]>;

    getAllUserCards(overrides?: CallOverrides): Promise<string[]>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getListingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMintedCoiunt(
      overrides?: CallOverrides
    ): Promise<[BigNumber, string] & { count: BigNumber; addr: string }>;

    getUserCard(
      overrides?: CallOverrides
    ): Promise<NFTMarketplace.UserCardStructOutput>;

    influencer_exist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    influencer_featured(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    influencer_str(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mintedAddr(overrides?: CallOverrides): Promise<string>;

    mintedCount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<string>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    resellToken(
      tokenIds: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeature(
      _influencer: PromiseOrValue<string>,
      featured: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    setUserCard(
      _enable: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    uniknums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateListingPrice(
      _listingPrice: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;
    Approval(
      owner?: PromiseOrValue<string> | null,
      approved?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): ApprovalEventFilter;

    "ApprovalForAll(address,address,bool)"(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;
    ApprovalForAll(
      owner?: PromiseOrValue<string> | null,
      operator?: PromiseOrValue<string> | null,
      approved?: null
    ): ApprovalForAllEventFilter;

    "AuctionItemBid(uint256,address,address,uint256,uint256,uint256)"(
      tokenId?: null,
      lastBider?: null,
      newBider?: null,
      price?: null,
      newprice?: null,
      timestamp?: null
    ): AuctionItemBidEventFilter;
    AuctionItemBid(
      tokenId?: null,
      lastBider?: null,
      newBider?: null,
      price?: null,
      newprice?: null,
      timestamp?: null
    ): AuctionItemBidEventFilter;

    "AuctionItemEnd(uint256,address,uint256,uint256)"(
      tokenId?: null,
      lastBider?: null,
      price?: null,
      timestamp?: null
    ): AuctionItemEndEventFilter;
    AuctionItemEnd(
      tokenId?: null,
      lastBider?: null,
      price?: null,
      timestamp?: null
    ): AuctionItemEndEventFilter;

    "MarketItemCreated(uint256,address,address,uint256,bool,bool)"(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      seller?: null,
      owner?: null,
      price?: null,
      isAuction?: null,
      isMarket?: null
    ): MarketItemCreatedEventFilter;
    MarketItemCreated(
      tokenId?: PromiseOrValue<BigNumberish> | null,
      seller?: null,
      owner?: null,
      price?: null,
      isAuction?: null,
      isMarket?: null
    ): MarketItemCreatedEventFilter;

    "MarketItemListed(uint256,address,uint256,uint256)"(
      tokenId?: null,
      seller?: null,
      price?: null,
      timestamp?: null
    ): MarketItemListedEventFilter;
    MarketItemListed(
      tokenId?: null,
      seller?: null,
      price?: null,
      timestamp?: null
    ): MarketItemListedEventFilter;

    "MarketItemSold(uint256,address,address,uint256,uint256)"(
      tokenId?: null,
      seller?: null,
      buyer?: null,
      price?: null,
      timestamp?: null
    ): MarketItemSoldEventFilter;
    MarketItemSold(
      tokenId?: null,
      seller?: null,
      buyer?: null,
      price?: null,
      timestamp?: null
    ): MarketItemSoldEventFilter;

    "Transfer(address,address,uint256)"(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
    Transfer(
      from?: PromiseOrValue<string> | null,
      to?: PromiseOrValue<string> | null,
      tokenId?: PromiseOrValue<BigNumberish> | null
    ): TransferEventFilter;
  };

  estimateGas: {
    addUserCard(
      _userName: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelToken(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createAuctionSale(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createMarketSale(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createToken(
      creator: PromiseOrValue<string>,
      tokenURI: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      num: PromiseOrValue<BigNumberish>,
      royalty: PromiseOrValue<string>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endAuction(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    endAuctionBatch(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetchAuctionItems(overrides?: CallOverrides): Promise<BigNumber>;

    fetchByTokenIds(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchItemsByFeatureInfluencers(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchMarketItems(overrides?: CallOverrides): Promise<BigNumber>;

    fetchMyAuctionNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchMyMarketNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchOwnableItems(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fetchRarityByTokenIds(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    fetchUserNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getAllUserCards(overrides?: CallOverrides): Promise<BigNumber>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getListingPrice(overrides?: CallOverrides): Promise<BigNumber>;

    getMintedCoiunt(overrides?: CallOverrides): Promise<BigNumber>;

    getUserCard(overrides?: CallOverrides): Promise<BigNumber>;

    influencer_exist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    influencer_featured(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    influencer_str(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mintedAddr(overrides?: CallOverrides): Promise<BigNumber>;

    mintedCount(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    resellToken(
      tokenIds: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeature(
      _influencer: PromiseOrValue<string>,
      featured: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setUserCard(
      _enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    uniknums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    updateListingPrice(
      _listingPrice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addUserCard(
      _userName: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelToken(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createAuctionSale(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createMarketSale(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createToken(
      creator: PromiseOrValue<string>,
      tokenURI: PromiseOrValue<string>,
      price: PromiseOrValue<BigNumberish>,
      flag: PromiseOrValue<BigNumberish>,
      tier: PromiseOrValue<BigNumberish>,
      num: PromiseOrValue<BigNumberish>,
      royalty: PromiseOrValue<string>,
      _time: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endAuction(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    endAuctionBatch(
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetchAuctionItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchByTokenIds(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchItemsByFeatureInfluencers(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchMarketItems(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fetchMyAuctionNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchMyMarketNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchOwnableItems(
      _to: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fetchRarityByTokenIds(
      tokenIds: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    fetchUserNFTs(
      user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getAllUserCards(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getApproved(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getListingPrice(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getMintedCoiunt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserCard(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    influencer_exist(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    influencer_featured(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    influencer_str(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      owner: PromiseOrValue<string>,
      operator: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mintedAddr(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mintedCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ownerOf(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    resellToken(
      tokenIds: PromiseOrValue<BigNumberish>[],
      price: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "safeTransferFrom(address,address,uint256,bytes)"(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      _data: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      operator: PromiseOrValue<string>,
      approved: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeature(
      _influencer: PromiseOrValue<string>,
      featured: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setUserCard(
      _enable: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenURI(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: PromiseOrValue<string>,
      to: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    uniknums(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    updateListingPrice(
      _listingPrice: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
